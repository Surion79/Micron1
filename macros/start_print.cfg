[gcode_macro START_PRINT]
description: Machine heatup procedure before starting a print
variable_bed_temp: 0
variable_extruder_temp: 0
variable_z_adjust: 0
variable_soak: 0
variable_chamber_temp: 0
variable_chamber_maxtime: 0
variable_initial_tool: 0
variable_check_gates: 0
variable_tools_used: ""
variable_sync_mmu_extruder: 0
variable_material: "XXX"
variable_fl_size: "0_0_0_0"
variable_bed_mesh_profile: ""
variable_total_layer: 0
variable_adaptive_primeline: 1
variable_travel_speed: 100
gcode:
    # Get all the parameters passed from the slicer
    {% set BED_TEMP = params.BED_TEMP|float %} # Bed temperature
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %} # Extruder temperature
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %}  # Optionnal Z adjustement from the slicer profile (ex. use it if you have textured vs smooth slicer profiles) 
    {% set CHAMBER_TEMP = params.CHAMBER|default(40)|int %} # Chamber temperature setpoint
    {% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|default(20)|int %} # Chamber heatsoak timeout in minutes
    #{% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %} # Get bounding box of the first layer for the adaptive bed mesh
    {% set ADAPTIVE_PRIMELINE = params.ADAPTIVE_PRIMELINE|default(1)|int %} # Weither to do or not an adaptive prime line near the real print zone
    {% set TRAVEL_SPEED = params.TRAVEL_SPEED|default(350)|int %}

    # Set the variables to be used in all the modules based on the slicer parameters
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={BED_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_maxtime VALUE={CHAMBER_MAXTIME}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=fl_size VALUE='"{FL_SIZE}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=adaptive_primeline VALUE={ADAPTIVE_PRIMELINE}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=travel_speed VALUE={TRAVEL_SPEED}
    
    {% if params.TOTAL_LAYER %} # total layers count (if provided by the slicer)
        SET_PRINT_STATS_INFO TOTAL_LAYER={params.TOTAL_LAYER|int}
        SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=total_layer VALUE={params.TOTAL_LAYER|int}
    {% endif %}

    #STATUS_LEDS COLOR="BUSY"

    #LIGHT_ON S={light_intensity_start_print}

    CLEAR_PAUSE

    BED_MESH_CLEAR

    #{% if filter_enabled %}
        #UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION=0
        #STOP_FILTER
    #{% endif %}

    #{% if part_fan_tach_enabled %}
        #M106 S255
        #G4 P2000
        #_PART_FAN_CHECK
        #M106 S0
    #{% endif %}
    #{% if hotend_fan_tach_enabled %}
        #UPDATE_DELAYED_GCODE ID=_BACKGROUND_HOTEND_TACHO_CHECK DURATION=1
    #{% endif %}

    SET_GCODE_OFFSET Z=0
    M221 S100
    M220 S100
    G90
    M83

    # Material parameters
    #{% if firmware_retraction_enabled %}
        #SET_RETRACTION RETRACT_LENGTH={material.retract_length} RETRACT_SPEED={material.retract_speed} UNRETRACT_EXTRA_LENGTH={material.unretract_extra_length} UNRETRACT_SPEED={material.unretract_speed}
    #{% endif %}
    #SET_PRESSURE_ADVANCE ADVANCE={material.pressure_advance}

    G28

#variable_startprint_actions: "bed_soak", "extruder_preheating", "chamber_soak", "clean", "tilt_calib", "z_offset", "bedmesh", "extruder_heating", "purge", "clean", "primeline"

    _HEATSOAK_BED
    _EXTRUDER_PREHEATING
    _HEATSOAK_CHAMBER
    #_CLEAN
    QGL
    _Z_CALIB
    _BED_MESH
    _EXTRUDER_HEATING
    #_PURGE
    #_CLEAN
    
    #_PRIMELINE - needs to be reworked. try it with loops instead for now
    
    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1

    #START_FILTER SPEED={material.filter_speed / 100}

    #{% if filament_sensor_enabled and not material.filament_sensor %}
    #SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
    #{% endif %}

    #STATUS_LEDS COLOR="PRINTING"

    #LIGHT_ON S={light_intensity_printing}

    RESPOND MSG="Start printing !"

    G92 E0.0

[gcode_macro _PRIMELINE]
gcode:
    # ----- PRIME LINE -------------------------------------------
    {% set FL_SIZE = printer["gcode_macro START_PRINT"].fl_size %}
    {% set ADAPTIVE_PRIMELINE = printer["gcode_macro START_PRINT"].adaptive_primeline %}
    RESPOND MSG="Create primeline"
    PRIMELINE SIZE={FL_SIZE} ADAPTIVE_MODE={ADAPTIVE_PRIMELINE}


[gcode_macro _HEATSOAK_BED]
gcode:
    # ----- BED HEATSOAK -------------------------------------
    # Heatsoak the bed if SOAK time is set and bed is not already warming up to the correct temperature (+-8Â°C).
    # We make the assumption that the soak is not needed if the bed is already at the correct target.
    # We also use the recirculating filter under the bed (if available) at full power to spread the heat
    # during the heatsoak if a specific temperature need to be reached.
    {% set BED_TEMP = printer["gcode_macro START_PRINT"].bed_temp %}
    {% set SOAK = printer["gcode_macro START_PRINT"].soak %}
    {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}
    {% set travel_speed = printer["gcode_macro START_PRINT"].travel_speed %}

    {% set St = travel_speed * 60 %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    #STATUS_LEDS COLOR="HEATING"

    {% if printer.heater_bed.temperature < (BED_TEMP - 8) %}
        # If the machine is equiped by a chamber temperature sensor and a recirculating filter (check is automatic under the hood),
        # then we look if a specific chamber temperature is needed and we power on the recirculating filter to spread the heat
        {% if (CHAMBER_TEMP > 0) and filter_enabled %}
            START_FILTER SPEED=1
        {% endif %}

        # If we need a full soak (not 0 min), then move the toolhead to the center front to spread the heat using the hotend fan
        {% if SOAK > 0 %}
            G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
        {% endif %}
    
        # Put the bed temperature target and wait for the soak
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME={SOAK}
    {% else %}
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME=0
    {% endif %}


[gcode_macro _HEATSOAK_CHAMBER]
gcode:
    # ----- CHAMBER HEATSOAK ----------------------------------
    # If a setpoint is defined and a sensor available, then we wait to reach the chamber temperature (with a timeout in case it's winter...)
    # If there is one, the recirculating filter is also be powered on from the previous step and kept like that to act as bed fans
    {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}
    {% set CHAMBER_MAXTIME = printer["gcode_macro START_PRINT"].chamber_maxtime %}

    #{% set chamber_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_enabled %}
    #{% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}
    {% set travel_speed = printer["gcode_macro START_PRINT"].travel_speed %}

    {% set St = travel_speed * 60 %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if CHAMBER_TEMP > 0 %}
        {% set CURRENT_TEMP = printer["temperature_sensor " ~ chamber_sensor_name].temperature|float %}

        # We do a first test to validate that the chamber is not already at temperature before starting the soak
        {% if CURRENT_TEMP <= CHAMBER_TEMP %}
            G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
            #START_FILTER SPEED=1
            HEATSOAK_CHAMBER TEMP={CHAMBER_TEMP} MAXTIME={CHAMBER_MAXTIME}
            #STOP_FILTER
        {% endif %}
    {% endif %}

[gcode_macro _EXTRUDER_HEATING]
gcode:
    # ----- EXTRUDER HEATING ---------------------------------
    # Heat the nozzle to print temperature ontop of the purge bucket (if available) or in the middle of the bed
    {% set EXTRUDER_TEMP = printer["gcode_macro START_PRINT"].extruder_temp %}
    {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}

    {% set travel_speed = printer["gcode_macro START_PRINT"].travel_speed %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    #STATUS_LEDS COLOR="HEATING"
    RESPOND MSG="Extruder heating to print temperature..."

    G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
    
    M109 S{EXTRUDER_TEMP}

    RESPOND MSG="Extruder temperature OK"


[gcode_macro _PURGE]
gcode:
    # ----- PURGE AND CLEAN ---------------------------------
    # Just put the nozzle ontop of the purge bucket to purge some material. Keep in mind that
    # if the hotend is not at the minimal extrude temperature, it will be heated up before purging
    #{% set EXTRUDER_TEMP = printer["gcode_macro START_PRINT"].extruder_temp %}

    #{% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}

    #{% if purge_and_brush_enabled %}
        #PURGE TEMP={EXTRUDER_TEMP}
    #{% endif %}


[gcode_macro _CLEAN]
gcode:
    # ----- PURGE AND CLEAN ---------------------------------
    # Just put the nozzle on the brush and clean it. Keep in mind that it's better to do
    # it with the hotend at material temperature but you can also do it at any time if needed
    #{% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}
    #{% set force_homing_before_brush = printer["gcode_macro _USER_VARIABLES"].force_homing_before_brush %}

    #{% if purge_and_brush_enabled %}
        #{% if force_homing_before_brush %}
            #G28 Z # perform homing before going to the brush to avoid a miss or crash
        #{% endif %}
        #CLEAN_NOZZLE
    #{% endif %}


[gcode_macro _Z_CALIB]
gcode:
    G28 Z


[gcode_macro _BED_MESH]
gcode:
    # ----- BED MESH -------------------------------------------
    {% set FL_SIZE = printer["gcode_macro START_PRINT"].fl_size %}
    ADAPTIVE_BED_MESH SIZE={FL_SIZE}


[gcode_macro _EXTRUDER_PREHEATING]
gcode:
    # Preheat the nozzle to safe probing temperature.
    {% set safe_extruder_temp = 150|float %}

    STATUS_LEDS COLOR="HEATING"

    RESPOND MSG="Pre-heating the nozzle to a safe temperature..."

    {% if printer.extruder.target < safe_extruder_temp %}
        M104 S{safe_extruder_temp} 
        RESPOND MSG="Extruder is heating at temperature of {safe_extruder_temp} degrees"
    {% else %}
        RESPOND MSG="Extruder is already hot"
    {% endif %}
    
